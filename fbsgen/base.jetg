#extends com.dyuproject.fbsgen.compiler.JetGroup.Base

#base_header(Proto proto, ProtoModule module, String prefix, suffix="")%%
«prefix»Generated by fbsgen from «source_path(proto, module)»«suffix»
#end

#source_path(Proto proto, ProtoModule module)%%
«if(!module.o.get("header_source_path"))»
«module.source.name»
«elseif(proto != null)»
«proto.sourcePath; format="\\==/"»
«else»
«module.source.path; format="\\==/"»
«endif»
#end

#base_var(Object val, ProtoModule module, fmt="NONE")%%
«val; format=fmt»«if(module.o.get("underscore_on_vars"))»_«endif»
#end

#ta_params(Annotation ta, ProtoModule module, k_separator=":")%%
#stop(ta.emptyP)
 (
«for(Map.Entry<String,Object> entry : ta.p.entrySet())»
«if(entry$$i != 0)», «endif»
«entry.key»«k_separator» «entry.value»
«endfor»
)
#end

#cpp_field_type(Field<?> field, ProtoModule module)%%
«if(field.repeated)»flatbuffers::Offset<flatbuffers::Vector<«endif»
«cpp_field_singular_type(field, module)»
«if(field.repeated)»>>«endif»
#end

#cpp_field_singular_type(Field<?> field, ProtoModule module)%%
«if(field.messageField)»
«if(((MessageField)field).message.struct)»
const «((MessageField)field).cppType» *
«else»
flatbuffers::Offset<«((MessageField)field).cppType»>
«endif»
«elseif(field.delimited)»
flatbuffers::Offset<flatbuffers::String>
«elseif(field.enumField)»
«field.udt.ta.name»_t
«elseif(field.boolField)»
uint8_t
«elseif(field.fpt)»
«field.class.simpleName; format="LOWER"»
«else»
«field.class.simpleName; format="LOWER"»_t
«endif»
#end

#cpp_struct_field_type(Field<?> field, ProtoModule module, decl=false)%%
«if(field.messageField)»
«if(!decl)»const «endif»«((MessageField)field).cppType»
«elseif(field.enumField)»
«if(decl || module.o.get("cpp_relaxed_enum_type"))»
«field.udt.ta.name»_t
«else»
«((EnumField)field).cppType»
«endif»
«elseif(field.boolField)»
«if(decl || module.o.get("cpp_bool_as_uint8"))»uint8_t«else»bool«endif»
«elseif(field.fpt)»
«field.class.simpleName; format="LOWER"»
«else»
«field.class.simpleName; format="LOWER"»_t
«endif»
#end

#-- already in JetGroup.Base
#error(Proto proto, String msg)
«#emit»
proto.getError().containsKey(msg + " [ " + proto.getSourcePath() + " ] ");
«#»
#end
--#

