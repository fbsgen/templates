
base_header(proto, module, prefix, suffix="") ::= <%
«prefix»Generated by fbsgen from «source_path(proto, module)»«suffix»
%>

source_path(proto, module) ::= <%
«if(!module.o.("header_source_path"))»
«module.source.name»
«elseif(proto)»
«proto.sourcePath; format="\\==/"»
«else»
«module.source.path; format="\\==/"»
«endif»
%>

base_var(val, module, fmt="NONE") ::= <%
«val; format=fmt»«if(module.o.("underscore_on_vars"))»_«endif»
%>

ta_params(ta, module, k_separator=":") ::= <%
«if(!ta.emptyP)» («ta.p:{k|«k»«k_separator» «ta.p.(k)»}; separator=", "»)«endif»
%>

cpp_field_type(field, module) ::= <%
«if(field.repeated)»flatbuffers::Offset<flatbuffers::Vector<«endif»
«cpp_field_singular_type(field, module)»
«if(field.repeated)»>>«endif»
%>

cpp_field_singular_type(field, module) ::= <%
«if(field.messageField)»
«if(field.message.struct)»
const «field.cppType» *
«else»
flatbuffers::Offset<«field.cppType»>
«endif»
«elseif(field.delimited)»
flatbuffers::Offset<flatbuffers::String>
«elseif(field.enumField)»
«field.eg.ta.name»_t
«elseif(field.boolField)»
uint8_t
«elseif(field.fpt)»
«field.class.simpleName; format="LOWER"»
«else»
«field.class.simpleName; format="LOWER"»_t
«endif»
%>

cpp_struct_field_type(field, module, decl=false) ::= <%
«if(field.messageField)»
«if(!decl)»const «endif»«field.cppType»
«elseif(field.enumField)»
«if(decl || module.o.("cpp_relaxed_enum_type"))»
«field.eg.ta.name»_t
«else»
«field.cppType»
«endif»
«elseif(field.boolField)»
«if(decl || module.o.("cpp_bool_as_uint8"))»uint8_t«else»bool«endif»
«elseif(field.fpt)»
«field.class.simpleName; format="LOWER"»
«else»
«field.class.simpleName; format="LOWER"»_t
«endif»
%>
