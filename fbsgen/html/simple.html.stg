import "fbsgen/base"
import "fbsgen/dict"

proto_block(proto, module) ::= <<
<!DOCTYPE html>
<html>
<head>
  <title>
    «if(module.o.("raw"))»raw«else»fbs«endif»: «proto.sourcePath»
  </title>
  <style>
    body {
      color: #555;
      background-color: #EEE;
      font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;
      font-size: 1.1em;
    }
    a {
      text-decoration: none;
    }
    div.nested {
      margin-left: 1em;
    }
    div.nested h2 {
      margin-top: 0.5em;
    }
    div.message h2, div.enum h2 {
      margin-bottom: 0;
    }
    div.message h2 div, div.enum h2 div {
      font-weight: normal;
      font-size: 0.75em;
    }
    div.message h2 a {
      color: #CD5C5C;
    }
    div.enum h2 a {
      color: #6B8E23;
    }
    div.message h2 span, div.enum h2 span {
      font-size: 0.73em;
    }
    div.field {
      margin-left: 1em;
    }
    div.field > span {
      color: #4682B4;
    }
    div.field > a {
      color: #CD5C5C;
    }
    div.e.field > a {
      color: #6B8E23;
    }
    h2 > div.top {
      font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace;
    }
    .comment {
      color: #999988;
      font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace;
      font-size: 0.8em;
    }
    .attr {
      font-weight: normal;
    }
    div.message > h2 > div.comment, div.message > h2 > div.top, div.enum > h2 > div.comment, div.enum > h2 > div.top {
      font-size: 0.54em;
    }
  </style>
</head>
<body>
  <div class="comment">
    // source: «proto.sourcePath»
  </div>
  <div>
    <b>«if(module.o.("raw"))»package«else»namespace«endif»</b> «proto.declaredPackageName»;
  </div>
  «proto.messages:message_block(module); separator="\n"»
  «proto.enumGroups:enum_block(module); separator="\n"»
</body>
</html>
>>

enum_block(eg, module, nested=false) ::= <<
<div class="enum«if(nested)» nested«endif»">
  <h2>
    «enum_top(eg, module)»
    <span>enum</span>
    <a href="#«eg.relativeName; format="\.==-"»" id="«eg.relativeName; format="\.==-"»">
      «if(module.o.("raw"))»
      «eg.name»
      «else»
      «eg.cppRelativeName»
      «endif»
    </a>
    «if(!module.o.("raw"))»
    <span class="attr">: <b>«get_fbs_int_type.(eg.ta.name)»</b>«ta_params(eg.ta, module)»</span>
    «endif»
    «eg.declaredValues:v_decl(module); separator="\n"»
  </h2>
</div>
>>

enum_top(eg, module) ::= <%
«if(module.o.("raw"))»
«eg.comments:{c|<div class="comment">/// «c»</div>}; separator="\n"»
«eg.a.values:{a|<div class="top">@«a.name»«if(!a.emptyP)»(«a.p:{k|«k» = «a.p.(k)»}; separator=", "»)«endif»</div>}; separator="\n"»
«endif»
%>

v_decl(v, module) ::= <<
<div class="field">
  «if(module.o.("raw"))»
  <span>«v.name»</span> = «v.number»;
  «else»
  <span>«v.name»</span> = «if(v.eg.ta.p.("bit_flags"))»«get_bit_pot_shiftnum.(v.number)»«else»«v.number»«endif»,
  «endif»
</div>
>>

message_block(message, module, nested=false) ::= <<
<div class="message«if(nested)» nested«endif»">
  <h2>
    «message_top(message, module)»
    <span>«message_kind(message, module)»</span>
    <a href="#«message.relativeName; format="\.==-"»" id="«message.relativeName; format="\.==-"»">
      «if(module.o.("raw"))»
      «message.name»
      «else»
      «message.cppRelativeName»
      «endif»
    </a>
    «if(!module.o.("raw") && message.ta)»
    «if(!message.ta.emptyP)»
    <span class="attr">«ta_params(message.ta, module)»</span>
    «endif»
    «endif»
  </h2>
  «if(module.o.("raw"))»
  «message.declaredFields:raw_field_decl(module); separator="\n"»
  «message.nestedMessages:message_block(module, true); separator="\n"»
  «message.nestedEnumGroups:enum_block(module, true); separator="\n"»
  «else»
  «message.declaredFields:fbs_field_decl(module); separator="\n"»
  «endif»
</div>
«if(!module.o.("raw"))»
«message.nestedMessages:message_block(module, true); separator="\n"»
«message.nestedEnumGroups:enum_block(module, true); separator="\n"»
«endif»
>>

message_top(message, module) ::= <%
«if(module.o.("raw"))»
«message.comments:{c|<div class="comment">/// «c»</div>}; separator="\n"»
«message.a.values:{a|<div class="top">@«a.name»«if(!a.emptyP)»(«a.p:{k|«k» = «a.p.(k)»}; separator=", "»)«endif»</div>}; separator="\n"»
«endif»
%>

message_kind(message, module) ::= <%
«if(module.o.("raw"))»
message
«elseif(message.a.("struct"))»
struct
«else»
table
«endif»
%>

fbs_field_decl(field, module) ::= <<
<div class="field«if(field.enumField)» e«endif»">
  <span>«field.name»</span>: «if(field.repeated)»[«endif»«fbs_field_type(field, module)»«if(field.repeated)»]«endif»
  (id: «module.w.n.(field.number).dec.num»«if(field.o.("deprecated"))», deprecated«endif»);
</div>
>>

fbs_field_type(field, module) ::= <%
«if(field.userDefinedType)»
<a href="#«field.userDefinedType.relativeName; format="\.==-"»">«field.fbsType»</a>
«else»
<b><span>«field.fbsType»</span></b>
«endif»
%>

raw_field_decl(field, module) ::= <<
<div class="field«if(field.enumField)» e«endif»">
  «field.comments:{c|<div class="comment">/// «c»</div>}; separator="\n"»
  <i>«field.modifier; format="LOWER"»</i> «raw_field_type(field, module)» <span>«field.name»</span> = «field.number»;
</div>
>>

raw_field_type(field, module) ::= <%
«if(field.userDefinedType)»
<a href="#«field.userDefinedType.relativeName; format="\.==-"»">«field.javaType»</a>
«else»
<b><span>«field.class.simpleName; format="LOWER"»</span></b>
«endif»
%>
